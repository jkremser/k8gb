//go:build geo || all
// +build geo all

package test

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"github.com/gruntwork-io/terratest/modules/k8s"
	"github.com/gruntwork-io/terratest/modules/random"
	"github.com/stretchr/testify/require"
	"k8gbterratest/utils"
	"strings"
	"testing"
)

func TestGeoTag(t *testing.T) {
	t.Parallel()
	namespaceName := fmt.Sprintf("k8gb-test-geo-tag-%s", strings.ToLower(random.UniqueId()))
	options := k8s.NewKubectlOptions(settings.Cluster1, "", namespaceName)
	helmOverrides := map[string]string{
		"k8gb.extGslbClustersGeoTags": "foo",
		"k8gb.clusterGeoTag":          "",
	}

	k8s.CreateNamespace(t, options, namespaceName)
	defer k8s.DeleteNamespace(t, options, namespaceName)

	// install k8gb in this namespace with restricted rbac
	utils.K8gbRBAC(t, options, "apply")
	defer utils.K8gbRBAC(t, options, "delete")
	utils.InstallK8gb(t, options, settings.Cluster1, helmOverrides)

	const (
		region = "topology.kubernetes.io/region"
		selector = "name=k8gb"
	)
	nodes := k8s.GetNodes(t, options)
	t.Run("Starting k8gb controller with an empty CLUSTER_GEO_TAG (and if the nodes are not annotated) should fail", func(t *testing.T) {
		// make sure the nodes don't have the annotation or labels on them
		for _, node := range nodes {
			k8s.RunKubectl(t, options, "label", "node", node.GetName(), fmt.Sprintf("%s-", region))
			k8s.RunKubectl(t, options, "annotate", "node", node.GetName(), fmt.Sprintf("%s-", region))
		}
		utils.WaitForPod(t, selector, options)
		logs, err := utils.GetLogsE(t, selector, options)
		require.NoError(t, err)
		require.Contains(t, logs, "Can't infer the CLUSTER_GEO_TAG")
	})

	t.Run("Add the correct label on a node should allow for empty CLUSTER_GEO_TAG", func(t *testing.T) {
		for _, node := range nodes {
			k8s.RunKubectl(t, options, "label", "node", node.GetName(), fmt.Sprintf("%s=%s", region, "bar"))
		}
		defer func() {
			for _, node := range nodes {
				k8s.RunKubectl(t, options, "label", "node", node.GetName(), fmt.Sprintf("%s-", region))
			}
		}()
		k8s.RunKubectl(t, options, "delete", "pods", "-l", selector)
		utils.WaitForPod(t, selector, options)

		logs, err := utils.GetLogsE(t, selector, options)
		require.NoError(t, err)
		require.NotContains(t, logs, "Can't infer the CLUSTER_GEO_TAG")
		require.Contains(t, logs, "Starting k8gb")
	})
}
